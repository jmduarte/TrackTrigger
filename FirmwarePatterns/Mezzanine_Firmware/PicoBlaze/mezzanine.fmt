              ; mezzanine.psm
              ; Pulsar-IIa Mezzanine Board
              ; Jamieson Olsen <jamieson@fnal.gov>
              ;
              ; This module drives three I2C buses:
              ;   Bus 0 : LTC1337 @ 0xCC
              ;   Bus 1 : LTC1337 @ 0xCC
              ;   Bus 2 : LTC1337 @ 0xCC, LTC2991 @ 0x93
              ;
              ; The LTC1337 is a voltage regulator and has a single byte control register
              ; that is write only.  The LTC2991 is a multi-purpose ADC device that is
              ; read-write.  The maximum I2C clock rate is 100kHz.  CLock is 10MHz.
              ;
              ;
              ; input ports: 0 DVDD
              ;              1 VDD
              ;              2 VPRECH
              ;              3 SDA input
              ;
              ; output ports: 0 SCL
              ;               1 SDA
              ;
              ; 2 May 2013 : initial version. Does not support the LTC2991 device.
              ;
              ; Port Map
              ;
              CONSTANT scl_port, 01    ; R/W, MSb is the pin
              CONSTANT sda_port, 02    ; R/W, MSb is the pin
              CONSTANT dvdd_port, 04   ; R/O
              CONSTANT vdd_port, 08    ; R/O
              CONSTANT vprech_port, 10 ; R/O
              ;
              ;
              NAMEREG s3, sda_reg
              NAMEREG s4, scl_reg
              ;NAMEREG s5,
              ;NAMEREG s6,
              ;NAMEREG s7,
              ;NAMEREG s8,
              ;NAMEREG s9,
              ;NAMEREG sA,
              ;NAMEREG sB,
              NAMEREG sC, bit_reg
              NAMEREG sD, dly_reg
              NAMEREG sE, dly2_reg
              NAMEREG sF, dly3_reg
              ;
              ; initialization stuff
              ; after hard reset go here
              ;
        init: LOAD scl_reg, 80
              OUTPUT scl_reg, scl_port
              LOAD sda_reg, 80
              OUTPUT sda_reg, sda_port
              ;
              ;
              ;
              ;
              ; main loop
              ;
       start: CALL i_start
              LOAD sda_reg, CC
              CALL i_tx
              LOAD sda_reg, 9F
              CALL i_tx
              CALL i_stop
              CALL delay_1s
              JUMP start
              ;
              ;
              ; generate a start condition.
              ;
     i_start: LOAD sda_reg, 80
              OUTPUT sda_reg, sda_port
              CALL delay_10u
              ;
              LOAD scl_reg, 80
              OUTPUT scl_reg, scl_port
              CALL delay_10u
              ;
              LOAD sda_reg, 00
              OUTPUT sda_reg, sda_port
              CALL delay_10u
              ;
              LOAD scl_reg, 00
              OUTPUT scl_reg, scl_port
              CALL delay_10u
              ;
              RETURN 
              ;
              ;
              ; generate a stop condition.
              ;
      i_stop: LOAD sda_reg, 00
              OUTPUT sda_reg, sda_port
              CALL delay_10u
              ;
              LOAD scl_reg, 80
              OUTPUT scl_reg, scl_port
              CALL delay_10u
              ;
              LOAD sda_reg, 80
              OUTPUT sda_reg, sda_port
              CALL delay_10u
              ;
              RETURN 
              ;
              ;
              ; send a byte on the I2C bus.  the byte is in sda_reg and will be shifted out MSb first.
              ; assume that a start condition has just been generated, so scl is high and sda is low.
              ;
              ; in the 9th bit position check sample the SDA line for the ACK bit.  the value of the
              ; of the ACK bit is stored in sda_reg in the MSb position.  ACK is active low.
              ; since clock rates are very slow (25kHz) clock stretching is not supported.
              ;
        i_tx: LOAD bit_reg, 08
              ;
       i_tx0: OUTPUT sda_reg, sda_port ; drive sda bit
              CALL delay_10u
              ;
              LOAD scl_reg, 80
              OUTPUT scl_reg, scl_port ; rising edge scl
              CALL delay_10u
              ;
              SL0 sda_reg
              CALL delay_10u           ; hold
              ;
              LOAD scl_reg, 00
              OUTPUT scl_reg, scl_port ; scl low
              CALL delay_10u
              ;
              SUB bit_reg, 01
              JUMP NZ, i_tx0
              ;
       i_tx2: LOAD sda_reg, 80
              OUTPUT sda_reg, sda_port ; release the sda line
              CALL delay_10u
              ;
              INPUT sda_reg, sda_port  ; sample the ACK pulse
              ;
              LOAD scl_reg, 80
              OUTPUT scl_reg, scl_port ; rising edge scl
              CALL delay_10u
              CALL delay_10u
              ;
              LOAD scl_reg, 00
              OUTPUT scl_reg, scl_port ; scl low
              CALL delay_10u
              ;
              RETURN                   ; scl is high, sda is released and may be held low by the slave
              ;
              ;
              ;
              ; *****************************************************************************
              ;                                  Delay Routines
              ; *****************************************************************************
              ;
              ; picoblaze clock period = 100ns or 10MHz
              ;
              ; 3 + 23*2 = 49 instructions = 98 clocks @ 100ns = 9.8us
              ;
   delay_10u: LOAD dly_reg, 01         ; 17
 dly10u_loop: SUB dly_reg, 01
              JUMP NZ, dly10u_loop
              RETURN 
              ;
              ; 3 + 248*2 = 499 instructions = 998 clocks @ 100ns = 100us
              ;
  delay_100u: LOAD dly_reg, 01         ; F8
dly100u_loop: SUB dly_reg, 01
              JUMP NZ, dly100u_loop
              RETURN 
              ;
   delay_10m: LOAD dly2_reg, 01        ; 64
 dly10m_loop: CALL delay_100u
              SUB dly2_reg, 01
              JUMP NZ, dly10m_loop
              RETURN 
              ;
    delay_1s: LOAD dly3_reg, 01        ; 64
  dly1s_loop: CALL delay_10m
              SUB dly3_reg, 01
              JUMP NZ, dly1s_loop
              RETURN 
              ;
              ;
              ;
              ; interrupts are not used in this design, jump immediately to
              ; start of the program
              ;
              ADDRESS 3FF
              JUMP init
