KCPSM6 Assembler log file for program 'C:\Users\jamieson\Documents\Aldec\Mezzanine\VIPRAM\PicoBlaze\mezzanine.psm'.
Generated by KCPSM6 version v2.46
Ken Chapman - Xilinx Ltd - 18th February 2013

Assembly datestamp: 06 May 2013
Assembly timestamp: 15:59:36

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 3FF hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 79
Memory locations available: 4017


Assembly listing

 Addr Code                 Instruction

 000                       ; mezzanine.psm
 000                       ; Pulsar-IIa Mezzanine Board
 000                       ; Jamieson Olsen <jamieson@fnal.gov>
 000                       ;
 000                       ; This module drives three I2C buses:
 000                       ;   Bus 0 : LTC1337 @ 0xCC
 000                       ;   Bus 1 : LTC1337 @ 0xCC
 000                       ;   Bus 2 : LTC1337 @ 0xCC, LTC2991 @ 0x93
 000                       ;
 000                       ; The LTC1337 is a voltage regulator and has a single byte control register
 000                       ; that is write only.  The LTC2991 is a multi-purpose ADC device that is
 000                       ; read-write.  The maximum I2C clock rate is 100kHz.  CLock is 10MHz.
 000                       ;
 000                       ;
 000                       ; input ports: 0 DVDD
 000                       ;              1 VDD
 000                       ;              2 VPRECH
 000                       ;              3 SDA input
 000                       ;
 000                       ; output ports: 0 SCL
 000                       ;               1 SDA
 000                       ;
 000                       ; 2 May 2013 : initial version. Does not support the LTC2991 device.
 000                       ;
 000                       ; Port Map
 000                       ;
 000                       CONSTANT scl_port, 01            ; R/W, MSb is the pin
 000                       CONSTANT sda_port, 02            ; R/W, MSb is the pin
 000                       CONSTANT dvdd_port, 04           ; R/O
 000                       CONSTANT vdd_port, 08            ; R/O
 000                       CONSTANT vprech_port, 10         ; R/O
 000                       ;
 000                       ;
 000                       NAMEREG s3, sda_reg
 000                       NAMEREG s4, scl_reg
 000                       ;NAMEREG s5,
 000                       ;NAMEREG s6,
 000                       ;NAMEREG s7,
 000                       ;NAMEREG s8,
 000                       ;NAMEREG s9,
 000                       ;NAMEREG sA,
 000                       ;NAMEREG sB,
 000                       NAMEREG sC, bit_reg
 000                       NAMEREG sD, dly_reg
 000                       NAMEREG sE, dly2_reg
 000                       NAMEREG sF, dly3_reg
 000                       ;
 000                       ; initialization stuff
 000                       ; after hard reset go here
 000                       ;
 000  01480          init: LOAD s4[scl_reg], 80
 001  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 002  01380                LOAD s3[sda_reg], 80
 003  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 004                       ;
 004                       ;
 004                       ;
 004                       ;
 004                       ; main loop
 004                       ;
 004  2000C         start: CALL 00C[i_start]
 005  013CC                LOAD s3[sda_reg], CC
 006  20023                CALL 023[i_tx]
 007  0139F                LOAD s3[sda_reg], 9F
 008  20023                CALL 023[i_tx]
 009  20019                CALL 019[i_stop]
 00A  20049                CALL 049[delay_1s]
 00B  22004                JUMP 004[start]
 00C                       ;
 00C                       ;
 00C                       ; generate a start condition.
 00C                       ;
 00C  01380       i_start: LOAD s3[sda_reg], 80
 00D  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 00E  2003C                CALL 03C[delay_10u]
 00F                       ;
 00F  01480                LOAD s4[scl_reg], 80
 010  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 011  2003C                CALL 03C[delay_10u]
 012                       ;
 012  01300                LOAD s3[sda_reg], 00
 013  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 014  2003C                CALL 03C[delay_10u]
 015                       ;
 015  01400                LOAD s4[scl_reg], 00
 016  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 017  2003C                CALL 03C[delay_10u]
 018                       ;
 018  25000                RETURN 
 019                       ;
 019                       ;
 019                       ; generate a stop condition.
 019                       ;
 019  01300        i_stop: LOAD s3[sda_reg], 00
 01A  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 01B  2003C                CALL 03C[delay_10u]
 01C                       ;
 01C  01480                LOAD s4[scl_reg], 80
 01D  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 01E  2003C                CALL 03C[delay_10u]
 01F                       ;
 01F  01380                LOAD s3[sda_reg], 80
 020  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 021  2003C                CALL 03C[delay_10u]
 022                       ;
 022  25000                RETURN 
 023                       ;
 023                       ;
 023                       ; send a byte on the I2C bus.  the byte is in sda_reg and will be shifted out MSb first.
 023                       ; assume that a start condition has just been generated, so scl is high and sda is low.
 023                       ;
 023                       ; in the 9th bit position check sample the SDA line for the ACK bit.  the value of the
 023                       ; of the ACK bit is stored in sda_reg in the MSb position.  ACK is active low.
 023                       ; since clock rates are very slow (25kHz) clock stretching is not supported.
 023                       ;
 023  01C08          i_tx: LOAD sC[bit_reg], 08
 024                       ;
 024  2D302         i_tx0: OUTPUT s3[sda_reg], 02[sda_port] ; drive sda bit
 025  2003C                CALL 03C[delay_10u]
 026                       ;
 026  01480                LOAD s4[scl_reg], 80
 027  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; rising edge scl
 028  2003C                CALL 03C[delay_10u]
 029                       ;
 029  14306                SL0 s3[sda_reg]
 02A  2003C                CALL 03C[delay_10u]              ; hold
 02B                       ;
 02B  01400                LOAD s4[scl_reg], 00
 02C  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; scl low
 02D  2003C                CALL 03C[delay_10u]
 02E                       ;
 02E  19C01                SUB sC[bit_reg], 01
 02F  36024                JUMP NZ, 024[i_tx0]
 030                       ;
 030  01380         i_tx2: LOAD s3[sda_reg], 80
 031  2D302                OUTPUT s3[sda_reg], 02[sda_port] ; release the sda line
 032  2003C                CALL 03C[delay_10u]
 033                       ;
 033  09302                INPUT s3[sda_reg], 02[sda_port]  ; sample the ACK pulse
 034                       ;
 034  01480                LOAD s4[scl_reg], 80
 035  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; rising edge scl
 036  2003C                CALL 03C[delay_10u]
 037  2003C                CALL 03C[delay_10u]
 038                       ;
 038  01400                LOAD s4[scl_reg], 00
 039  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; scl low
 03A  2003C                CALL 03C[delay_10u]
 03B                       ;
 03B  25000                RETURN                           ; scl is high, sda is released and may be held low by the slave
 03C                       ;
 03C                       ;
 03C                       ;
 03C                       ; *****************************************************************************
 03C                       ;                                  Delay Routines
 03C                       ; *****************************************************************************
 03C                       ;
 03C                       ; picoblaze clock period = 100ns or 10MHz
 03C                       ;
 03C                       ; 3 + 23*2 = 49 instructions = 98 clocks @ 100ns = 9.8us
 03C                       ;
 03C  01D01     delay_10u: LOAD sD[dly_reg], 01             ; 17
 03D  19D01   dly10u_loop: SUB sD[dly_reg], 01
 03E  3603D                JUMP NZ, 03D[dly10u_loop]
 03F  25000                RETURN 
 040                       ;
 040                       ; 3 + 248*2 = 499 instructions = 998 clocks @ 100ns = 100us
 040                       ;
 040  01D01    delay_100u: LOAD sD[dly_reg], 01             ; F8
 041  19D01  dly100u_loop: SUB sD[dly_reg], 01
 042  36041                JUMP NZ, 041[dly100u_loop]
 043  25000                RETURN 
 044                       ;
 044  01E01     delay_10m: LOAD sE[dly2_reg], 01            ; 64
 045  20040   dly10m_loop: CALL 040[delay_100u]
 046  19E01                SUB sE[dly2_reg], 01
 047  36045                JUMP NZ, 045[dly10m_loop]
 048  25000                RETURN 
 049                       ;
 049  01F01      delay_1s: LOAD sF[dly3_reg], 01            ; 64
 04A  20044    dly1s_loop: CALL 044[delay_10m]
 04B  19F01                SUB sF[dly3_reg], 01
 04C  3604A                JUMP NZ, 04A[dly1s_loop]
 04D  25000                RETURN 
 04E                       ;
 04E                       ;
 04E                       ;
 04E                       ; interrupts are not used in this design, jump immediately to
 04E                       ; start of the program
 04E                       ;
 3FF                       ADDRESS 3FF
 3FF  22000                JUMP 000[init]



List of PSM files that have been assembled

C:\Users\jamieson\Documents\Aldec\Mezzanine\VIPRAM\PicoBlaze\mezzanine.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   15'd         
 timestamp_minutes 59'd         
 timestamp_seconds 36'd         
 datestamp_year    13'd         
 datestamp_month   5'd          
 datestamp_day     06'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 scl_port          01           mezzanine.psm
 sda_port          02           mezzanine.psm
 dvdd_port         04           mezzanine.psm
 vdd_port          08           mezzanine.psm
 vprech_port       10           mezzanine.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.46"        
 datestamp$        "06 May 2013"  
 timestamp$        "15:59:36"     



List of line labels

   Label          Addr  Source PSM File

   init           000   mezzanine.psm
   start          004   mezzanine.psm
   i_start        00C   mezzanine.psm
   i_stop         019   mezzanine.psm
   i_tx           023   mezzanine.psm
   i_tx0          024   mezzanine.psm
 * i_tx2          030   mezzanine.psm
   delay_10u      03C   mezzanine.psm
   dly10u_loop    03D   mezzanine.psm
   delay_100u     040   mezzanine.psm
   dly100u_loop   041   mezzanine.psm
   delay_10m      044   mezzanine.psm
   dly10m_loop    045   mezzanine.psm
   delay_1s       049   mezzanine.psm
   dly1s_loop     04A   mezzanine.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             21
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               5
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           -
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT           15
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP              7
 JUMP@             -
 CALL             22
 CALL@             -
 RETURN            7
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
