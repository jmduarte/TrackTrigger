KCPSM6 Assembler log file for program 'C:\Users\jamieson\Documents\Aldec\Mezzanine\VIPRAM\src\PicoBlaze\mezzanine.psm'.
Generated by KCPSM6 version v2.46
Ken Chapman - Xilinx Ltd - 18th February 2013

Assembly datestamp: 08 May 2013
Assembly timestamp: 16:03:14

Contents
  Assembly listing
  List of PSM files
  List of CONSTANTs
  List of TABLEs
  List of STRINGs
  List of line labels
  Instruction usage statistics


Last occupied address: 3FF hex
Nominal program memory size: 1K (1024)   address(9:0)
Actual memory size: 4096
  (Default memory size)
Occupied memory locations: 92
Memory locations available: 4004


Assembly listing

 Addr Code                 Instruction

 000                       ; mezzanine.psm
 000                       ; Pulsar-IIa Mezzanine Board
 000                       ; Jamieson Olsen <jamieson@fnal.gov>
 000                       ;
 000                       ; This module drives three I2C buses:
 000                       ;   Bus 0 : LTC1337 @ 0xCC
 000                       ;   Bus 1 : LTC1337 @ 0xCC
 000                       ;   Bus 2 : LTC1337 @ 0xCC, LTC2991 @ 0x93
 000                       ;
 000                       ; The LTC1337 is a voltage regulator and has a single byte control register
 000                       ; that is write only.  The LTC2991 is a multi-purpose ADC device that is
 000                       ; read-write.  The maximum I2C clock rate is 100kHz.  CLock is 10MHz.
 000                       ;
 000                       ;
 000                       ; input ports: 0 DVDD
 000                       ;              1 VDD
 000                       ;              2 VPRECH
 000                       ;              3 SDA input
 000                       ;
 000                       ; output ports: 0 SCL
 000                       ;               1 SDA
 000                       ;
 000                       ; 2 May 2013 : initial version. Does not support the LTC2991 device.
 000                       ;
 000                       ; Port Map
 000                       ;
 000                       CONSTANT scl_port, 01            ; R/W, MSb is the pin
 000                       CONSTANT sda_port, 02            ; R/W, MSb is the pin
 000                       CONSTANT dvdd_port, 04           ; R/O
 000                       CONSTANT vdd_port, 08            ; R/O
 000                       CONSTANT vprech_port, 10         ; R/O
 000                       CONSTANT mux_port, 20            ; W/O
 000                       CONSTANT enable_port, 40         ; W/O
 000                       ;
 000                       ;
 000                       NAMEREG s3, sda_reg
 000                       NAMEREG s4, scl_reg
 000                       NAMEREG s5, mux_reg
 000                       ;NAMEREG s6, enable_reg
 000                       ;NAMEREG s7,
 000                       ;NAMEREG s8,
 000                       ;NAMEREG s9,
 000                       ;NAMEREG sA,
 000                       ;NAMEREG sB,
 000                       NAMEREG sC, bit_reg
 000                       NAMEREG sD, dly_reg
 000                       NAMEREG sE, dly2_reg
 000                       NAMEREG sF, dly3_reg
 000                       ;
 000                       ; initialization stuff
 000                       ; after hard reset go here
 000                       ;
 000  01502          init: LOAD s5[mux_reg], 02
 001                       ;
 001  2D520         init0: OUTPUT s5[mux_reg], 20[mux_port]
 002  01480                LOAD s4[scl_reg], 80
 003  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 004  01380                LOAD s3[sda_reg], 80
 005  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 006                       ;
 006  19501                SUB s5[mux_reg], 01
 007  3E001                JUMP NC, 001[init0]
 008                       ;
 008                       ; main loop
 008                       ;
 008  01502         start: LOAD s5[mux_reg], 02
 009  2D520        start0: OUTPUT s5[mux_reg], 20[mux_port]
 00A                       ;
 00A  20015                CALL 015[i_start]
 00B  013CC                LOAD s3[sda_reg], CC             ; address the regulator, write byte.
 00C  2002C                CALL 02C[i_tx]
 00D  01326                LOAD s3[sda_reg], 26             ; should set regulator to 1.50V
 00E  2002C                CALL 02C[i_tx]
 00F  20022                CALL 022[i_stop]
 010  2004D                CALL 04D[delay_100u]
 011                       ;
 011  19501                SUB s5[mux_reg], 01
 012  3E009                JUMP NC, 009[start0]
 013                       ;
 013  20056                CALL 056[delay_1s]
 014  22008                JUMP 008[start]
 015                       ;
 015                       ;
 015                       ; generate a start condition.
 015                       ;
 015  01380       i_start: LOAD s3[sda_reg], 80
 016  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 017  20045                CALL 045[delay_3u]
 018                       ;
 018  01480                LOAD s4[scl_reg], 80
 019  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 01A  20045                CALL 045[delay_3u]
 01B                       ;
 01B  01300                LOAD s3[sda_reg], 00
 01C  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 01D  20045                CALL 045[delay_3u]
 01E                       ;
 01E  01400                LOAD s4[scl_reg], 00
 01F  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 020  20045                CALL 045[delay_3u]
 021                       ;
 021  25000                RETURN 
 022                       ;
 022                       ;
 022                       ; generate a stop condition.
 022                       ;
 022  01300        i_stop: LOAD s3[sda_reg], 00
 023  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 024  20045                CALL 045[delay_3u]
 025                       ;
 025  01480                LOAD s4[scl_reg], 80
 026  2D401                OUTPUT s4[scl_reg], 01[scl_port]
 027  20045                CALL 045[delay_3u]
 028                       ;
 028  01380                LOAD s3[sda_reg], 80
 029  2D302                OUTPUT s3[sda_reg], 02[sda_port]
 02A  20045                CALL 045[delay_3u]
 02B                       ;
 02B  25000                RETURN 
 02C                       ;
 02C                       ;
 02C                       ; send a byte on the I2C bus.  the byte is in sda_reg and will be shifted out MSb first.
 02C                       ; assume that a start condition has just been generated, so scl is high and sda is low.
 02C                       ;
 02C                       ; in the 9th bit position check sample the SDA line for the ACK bit.  the value of the
 02C                       ; of the ACK bit is stored in sda_reg in the MSb position.  ACK is active low.
 02C                       ; since clock rates are very slow (25kHz) clock stretching is not supported.
 02C                       ;
 02C  01C08          i_tx: LOAD sC[bit_reg], 08
 02D                       ;
 02D  2D302         i_tx0: OUTPUT s3[sda_reg], 02[sda_port] ; drive sda bit
 02E  20045                CALL 045[delay_3u]
 02F                       ;
 02F  01480                LOAD s4[scl_reg], 80
 030  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; rising edge scl
 031  20045                CALL 045[delay_3u]
 032                       ;
 032  14306                SL0 s3[sda_reg]
 033  20045                CALL 045[delay_3u]               ; hold
 034                       ;
 034  01400                LOAD s4[scl_reg], 00
 035  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; scl low
 036  20045                CALL 045[delay_3u]
 037                       ;
 037  19C01                SUB sC[bit_reg], 01
 038  3602D                JUMP NZ, 02D[i_tx0]
 039                       ;
 039  01380         i_tx2: LOAD s3[sda_reg], 80
 03A  2D302                OUTPUT s3[sda_reg], 02[sda_port] ; release the sda line
 03B  20045                CALL 045[delay_3u]
 03C                       ;
 03C  09302                INPUT s3[sda_reg], 02[sda_port]  ; sample the ACK pulse
 03D                       ;
 03D  01480                LOAD s4[scl_reg], 80
 03E  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; rising edge scl
 03F  20045                CALL 045[delay_3u]
 040  20045                CALL 045[delay_3u]
 041                       ;
 041  01400                LOAD s4[scl_reg], 00
 042  2D401                OUTPUT s4[scl_reg], 01[scl_port] ; scl low
 043  20045                CALL 045[delay_3u]
 044                       ;
 044  25000                RETURN                           ; scl is high, sda is released and may be held low by the slave
 045                       ;
 045                       ;
 045                       ;
 045                       ; *****************************************************************************
 045                       ;                                  Delay Routines
 045                       ; *****************************************************************************
 045                       ;
 045                       ; picoblaze clock period = 100ns or 10MHz
 045                       ;
 045                       ;
 045                       ; 3 + 6*2 = 15 instructions = 30 clocks @ 100ns = 3us
 045                       ;
 045  01D06      delay_3u: LOAD sD[dly_reg], 06             ;
 046  19D01    dly3u_loop: SUB sD[dly_reg], 01
 047  36046                JUMP NZ, 046[dly3u_loop]
 048  25000                RETURN 
 049                       ;
 049                       ; 3 + 23*2 = 49 instructions = 98 clocks @ 100ns = 9.8us
 049                       ;
 049  01D17     delay_10u: LOAD sD[dly_reg], 17             ; 17
 04A  19D01   dly10u_loop: SUB sD[dly_reg], 01
 04B  3604A                JUMP NZ, 04A[dly10u_loop]
 04C  25000                RETURN 
 04D                       ;
 04D                       ; 3 + 248*2 = 499 instructions = 998 clocks @ 100ns = 100us
 04D                       ;
 04D  01DF8    delay_100u: LOAD sD[dly_reg], F8             ; F8
 04E  19D01  dly100u_loop: SUB sD[dly_reg], 01
 04F  3604E                JUMP NZ, 04E[dly100u_loop]
 050  25000                RETURN 
 051                       ;
 051  01E64     delay_10m: LOAD sE[dly2_reg], 64            ; 64
 052  2004D   dly10m_loop: CALL 04D[delay_100u]
 053  19E01                SUB sE[dly2_reg], 01
 054  36052                JUMP NZ, 052[dly10m_loop]
 055  25000                RETURN 
 056                       ;
 056  01F64      delay_1s: LOAD sF[dly3_reg], 64            ; 64
 057  20051    dly1s_loop: CALL 051[delay_10m]
 058  19F01                SUB sF[dly3_reg], 01
 059  36057                JUMP NZ, 057[dly1s_loop]
 05A  25000                RETURN 
 05B                       ;
 05B                       ;
 05B                       ;
 05B                       ; interrupts are not used in this design, jump immediately to
 05B                       ; start of the program
 05B                       ;
 3FF                       ADDRESS 3FF
 3FF  22000                JUMP 000[init]



List of PSM files that have been assembled

C:\Users\jamieson\Documents\Aldec\Mezzanine\VIPRAM\src\PicoBlaze\mezzanine.psm



List of defined constants

 CONSTANT name     Value        Source PSM File

 timestamp_hours   16'd         
 timestamp_minutes 03'd         
 timestamp_seconds 14'd         
 datestamp_year    13'd         
 datestamp_month   5'd          
 datestamp_day     08'd         
 NUL               00           
 BEL               07           
 BS                08           
 HT                09           
 LF                0A           
 VT                0B           
 CR                0D           
 ESC               1B           
 DEL               7F           
 DCS               90           
 ST                9C           
 scl_port          01           mezzanine.psm
 sda_port          02           mezzanine.psm
 dvdd_port         04           mezzanine.psm
 vdd_port          08           mezzanine.psm
 vprech_port       10           mezzanine.psm
 mux_port          20           mezzanine.psm
 enable_port       40           mezzanine.psm



No TABLEs defined



List of text strings

 STRING name       String         Source PSM File

 KCPSM6_version$   "v2.46"        
 datestamp$        "08 May 2013"  
 timestamp$        "16:03:14"     



List of line labels

   Label          Addr  Source PSM File

   init           000   mezzanine.psm
   init0          001   mezzanine.psm
   start          008   mezzanine.psm
   start0         009   mezzanine.psm
   i_start        015   mezzanine.psm
   i_stop         022   mezzanine.psm
   i_tx           02C   mezzanine.psm
   i_tx0          02D   mezzanine.psm
 * i_tx2          039   mezzanine.psm
   delay_3u       045   mezzanine.psm
   dly3u_loop     046   mezzanine.psm
 * delay_10u      049   mezzanine.psm
   dly10u_loop    04A   mezzanine.psm
   delay_100u     04D   mezzanine.psm
   dly100u_loop   04E   mezzanine.psm
   delay_10m      051   mezzanine.psm
   dly10m_loop    052   mezzanine.psm
   delay_1s       056   mezzanine.psm
   dly1s_loop     057   mezzanine.psm

      * Line label has not been referenced in any instructions.
        Hint - This may indicate unused code that could be
               removed to reduce the size of this program.



Instruction usage statistics

 Instruction    Instances

 LOAD             24
 STAR              -

 AND               -
 OR                -
 XOR               -

 ADD               -
 ADDCY             -
 SUB               8
 SUBCY             -

 TEST              -
 TESTCY            -
 COMPARE           -
 COMPARECY         -

 SL0               1
 SL1               -
 SLX               -
 SLA               -
 RL                -
 SR0               -
 SR1               -
 SRX               -
 SRA               -
 RR                -

 REGBANK           -

 INPUT             1
 OUTPUT           17
 OUTPUTK           -

 STORE             -
 FETCH             -

 DISABLE           -
 ENABLE            -
 RETURNI           -

 JUMP             10
 JUMP@             -
 CALL             23
 CALL@             -
 RETURN            8
 LOAD&RETURN       -

 HWBUILD           -



End of KCPSM6 log file.
